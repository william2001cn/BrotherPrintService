using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.ServiceProcess;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Timers;
using System.Text.RegularExpressions;
using bpac;
using System.Linq;

namespace MESPrintService
{
    public partial class Service1 : ServiceBase
    {



        public Service1()
        {
            InitializeComponent();
            System.Timers.Timer _MyTimer = new System.Timers.Timer();

            _MyTimer.Interval = 5 * 1000;
            //_MyTimer.AutoReset = true;

            // Start the timer
            _MyTimer.Enabled = true;

            Console.WriteLine("Press the Enter key to exit the program at any time... ");
            Console.ReadLine();

            _MyTimer.Elapsed += _MyTimerElapsed;

        }



        protected override void OnStart(string[] args)
        {
            Debugger.Launch();
            FileStream stream2 = File.Open(@"c:\brother\PrintServiceLog.txt", FileMode.OpenOrCreate, FileAccess.Write);
            stream2.Seek(0, SeekOrigin.Begin);
            stream2.SetLength(0); //清空txt文件
            stream2.Close();
            _MyTimer.Start();

        }

        protected override void OnStop()
        {
            _MyTimer.Stop();

        }


        private List<string> GetCSVData(string filePath)
        {

            try
            {
                Encoding encoding = Encoding.UTF8;

                //System.Text.Encoding  encoding = GetType(filePath); //Encoding.ASCII;//
                // DataTable dt = new DataTable();

                System.IO.FileStream fs = new System.IO.FileStream(filePath, System.IO.FileMode.Open, System.IO.FileAccess.Read);

                // System.IO.StreamReader sr = new System.IO.StreamReader(fs, encoding);
                System.IO.StreamReader sr = new System.IO.StreamReader(fs, System.Text.Encoding.UTF8);

                //记录每次读取的一行记录

                string strLine = "";

                //记录每行记录中的各字段内容

                string[] aryLine = null;

                //string[] tableHead = null;

                //标示列数

                //  int columnCount = 0;

                //标示是否是读取的第一行

                bool IsFirst = true;

                //逐行读取CSV中的数据

                while ((strLine = sr.ReadLine()) != null)

                {
                    if (IsFirst == true)
                    {
                        aryLine = strLine.Split(new string[] { "#*#" }, StringSplitOptions.None);
                        //  aryLine = Regex.Split(strLine, "#*#", RegexOptions.IgnoreCase);
                        //  string[] sArray = Regex.Split(strLine, "#*#", RegexOptions.IgnoreCase);
                    }
                }

                sr.Close();
                fs.Close();

                return new List<System.String>(aryLine);
            }
            catch
            { return null; }
        }


        public void DeleteFile(string path)
        {
            FileAttributes attr = File.GetAttributes(path);
            if (attr == FileAttributes.Directory)
            {
                Directory.Delete(path, true);
            }
            else
            {
                File.Delete(path);
            }
        }

        public string AddLetter(string mystring)
        {

            string tem = " \"" + mystring + " \"";
            return tem;
        }

        public string GetPrinterName(string Location)
        {
        
            string filePath = @"c:\brother\SelectPrinter.ini";



            try
            {
                Encoding encoding = Encoding.UTF8;
 

                System.IO.FileStream fs = new System.IO.FileStream(filePath, System.IO.FileMode.Open, System.IO.FileAccess.Read);
                      System.IO.StreamReader sr = new System.IO.StreamReader(fs, System.Text.Encoding.UTF8);
          string strLine = "";
                string[] aryLine = null;
                bool IsFirst = true;
                //逐行读取CSV中的数据
                while ((strLine = sr.ReadLine()) != null)

                {
                    if (IsFirst == true)
                    {
                        aryLine = strLine.Split(new string[] { ":" }, StringSplitOptions.None);
                        if (aryLine[0].Equals(Location))
                        {
                            return aryLine[1];
                        }

                    }
                    else
                    {
                        return "NoPrinter";
                    }
                }

                sr.Close();
                fs.Close();
                return "NoPrinter";
         
            }
            catch
            { return null; }


 

        }


        internal void _MyTimerElapsed(object sender, ElapsedEventArgs e)
        {
            List<string> myList = new List<string>();


            //添加往C盘新建一个文本文件的程序
            try
            {
                ////            System.Diagnostics.ProcessStartInfo Info = new System.Diagnostics.ProcessStartInfo();

                //设置外部程序名
                //   Info.FileName = "notepad.exe";
                ////               Info.FileName = @"C:\brother\BrotherTest.exe";
                //  Info.WindowStyle = System.Diagnostics.ProcessWindowStyle.Normal; // ProcessWindowStyle.Normal;

                string Labelpath = "c:\\brother\\label.txt";




                DirectoryInfo folder = new DirectoryInfo(@"c:\brother");

        

           //     IEnumerable<string> fileEntries = from files in Directory.GetFiles("Label*.txt") order by files select files;

                List<string> FileName = new List<string>();

                foreach (FileInfo file in folder.GetFiles("Label*.txt"))
                {
                    FileName.Add(file.FullName);
                    FileName.Sort();
                }

                for (int i = 0; i < FileName.Count - 1;i ++)
                {
                    Console.WriteLine(FileName[i]);
                }

            //        foreach (FileInfo file in folder.GetFiles("Label*.txt"))

                for (int j=0;j<=FileName.Count-1;j++)
                {
                    //  Console.WriteLine(file.FullName);

              //\\      Console.Out.WriteLine(file.ToString());

                    string logFileName = @"C:\\brother\PrintServiceLog.txt"; // 文件路径
                                                                             //-----
                    string path = logFileName;//文件的路径，保证文件存在。
                    FileStream fs = new FileStream(path, FileMode.Append);
                    StreamWriter sw = new StreamWriter(fs);
                    FileInfo file = new FileInfo(FileName[j]);

                    myList = GetCSVData(file.FullName);



                    if (myList is null)
                    {
                        sw.WriteLine("  没有数据打印, 或者打印参数不对!");
                    }
                    else
                    {
                        string arg = "";
                        arg = myList[0].Replace("\"", "");
                        for (int i = 1; i <= myList.Count - 1; i++)
                        {
                            string tem = myList[i].Replace("\"", "");
                            arg = arg + "," + tem;

                        }



                        sw.WriteLine("日期:" + DateTime.Now.ToString() + "打印开始");
                        sw.WriteLine("打印文件名:" + file.FullName);
                        sw.WriteLine("打印参数数量:" + myList.Count().ToString());
                        sw.WriteLine("打印参数:" + arg);
                        sw.Flush();


                        if (myList[0].Equals("DILUTION"))
                        {
                            bpac.DocumentClass doc = new DocumentClass();
                            //pac.DocumentClass doc = new DocumentClass();


                            Console.WriteLine(DateTime.Now.ToString());
                            if (doc.Open(@"c:\brother\ec.lbx"))
                            {

                                {
                                    Console.WriteLine(DateTime.Now.ToString());

                                    doc.GetObject("myBarcode").Text = myList[2];
                                    doc.GetObject("name").Text = myList[2];
                                    doc.GetObject("desc").Text = myList[3];

                                    doc.GetObject("date1").Text = myList[4];

                                    string myPrinter = GetPrinterName("DILUTION");
                                    if ( !myPrinter.Equals("NoPrinter"))
                                        { 
                                    doc.SetPrinter(myPrinter, true);

                                    sw.WriteLine("打印机:  "+ myPrinter) ;

                                    }

                                    Boolean result = doc.StartPrint("", PrintOptionConstants.bpoHalfCut | PrintOptionConstants.bpoChainPrint);
                                    sw.WriteLine("开始准备打印,状态为:" + result.ToString());

                                    Boolean result2 = doc.PrintOut(1, PrintOptionConstants.bpoHalfCut | PrintOptionConstants.bpoChainPrint);
                                    sw.WriteLine("正在打印,状态为:" + result2.ToString());

                                    sw.WriteLine("程序成功打印成功,正常退出！");
                                    doc.EndPrint();
                                }
                                doc.Close();
                            }

                        }



                        if (myList[0].Equals("MIXINK"))
                        {
                            bpac.DocumentClass doc = new DocumentClass();
                            //pac.DocumentClass doc = new DocumentClass();

                        //    bpac.Printer prn = new bpac.Printer();
                         //   prn.GetInstalledPrinters();

                            doc.SetPrinter("BrotherMixInk",true);


                            Console.WriteLine(DateTime.Now.ToString());
                            if (doc.Open(@"c:\brother\mixink.lbx"))
                            {

                                {
                                    Console.WriteLine(DateTime.Now.ToString());

                                    doc.GetObject("myBarcode").Text = myList[2];
                                    doc.GetObject("name").Text = myList[2];
                                    doc.GetObject("desc").Text = myList[3];
                                    doc.GetObject("level").Text = myList[6];
                                    doc.GetObject("date1").Text = myList[4];
                                    doc.GetObject("date2").Text = myList[5];
                             //       sw.WriteLine("打印机:BrotherMixInk");

                                    string myPrinter = GetPrinterName("MIXINK");

                                    if (!myPrinter.Equals("NoPrinter"))
                                    {
                                        doc.SetPrinter(myPrinter, true);

                                        sw.WriteLine("打印机:  " + myPrinter);

                                    }


                                    Boolean result = doc.StartPrint("", PrintOptionConstants.bpoHalfCut | PrintOptionConstants.bpoChainPrint);
                                    sw.WriteLine("开始准备打印,状态为:" + result.ToString());

                                    Boolean result2 = doc.PrintOut(1, PrintOptionConstants.bpoHalfCut | PrintOptionConstants.bpoChainPrint);
                                    sw.WriteLine("正在打印,状态为:" + result2.ToString());

                                    sw.WriteLine("程序成功打印成功,正常退出！");
                                    doc.EndPrint();
                                }
                                doc.Close();
                            }

                        }

                        if (myList[0].Equals("IQC"))
                        {
                            bpac.DocumentClass doc = new DocumentClass();
                            //pac.DocumentClass doc = new DocumentClass();
                            bpac.PrinterClass myPrinter = new PrinterClass();
                            object myobj = new object();
                            myobj = myPrinter.GetInstalledPrinters();



                            if (doc.Open(@"c:\brother\material.lbx"))
                            {

                                {
                                    Console.WriteLine(DateTime.Now.ToString());

                                    //   String[] myData = myList[0].ToString().Split('|');
                                    doc.GetObject("myBarcode").Text = myList[2];

                                    doc.GetObject("name").Text = myList[2];
                                    doc.GetObject("desc").Text = myList[3].Replace("\"", "");

                                    doc.GetObject("date1").Text = myList[4];

                                    //        string aa =Convert. PrintOptionConstants.bpoHalfCut.ToString();


                                    string myP = GetPrinterName("IQC");

                                    if (!myP.Equals("NoPrinter"))
                                    {
                                        doc.SetPrinter(myP, true);

                                        sw.WriteLine("打印机:  " + myPrinter);

                                    }

                                    Boolean result = doc.StartPrint("", PrintOptionConstants.bpoHalfCut | PrintOptionConstants.bpoChainPrint);
                                    sw.WriteLine("开始准备打印,状态为:" + result.ToString());

                                    int CopyCount = int.Parse(myList[5]);
                                    Boolean result2 = doc.PrintOut(CopyCount, PrintOptionConstants.bpoHalfCut | PrintOptionConstants.bpoChainPrint);
                                    sw.WriteLine("正在打印,状态为:" + result2.ToString());

                                    sw.WriteLine("程序成功打印成功,正常退出！");
                                    doc.EndPrint();
                                }
                                doc.Close();
                            }

                        }





                        //设置外部程序的启动参数（命令行参数）为test.txt

                        ////              Info.Arguments = arg;

                        //设置外部程序工作目录为   C:\
                        ////                         Info.WorkingDirectory = "C:\\brother";

                        //声明一个程序类
                        ////                         System.Diagnostics.Process Proc;

                        //   try
                        ////                      {
                        //
                        //启动外部程序
                        //
                        ////             Proc = System.Diagnostics.Process.Start(Info);
                        ////                         }
                        //  catch (System.ComponentModel.Win32Exception  e)
                        ////                           {
                        //   Console.WriteLine("系统找不到指定的程序文件。\r{0}", e);
                        //   return;
                        /////                        }

                        //打印出外部程序的开始执行时间
                        ////                  sw.WriteLine("外部程序的开始执行时间：{0}", Proc.StartTime);

                        //等待3秒钟
                        ////                  Proc.WaitForExit(20000);

                        //如果这个外部程序没有结束运行则对其强行终止
                        ////                  if (Proc.HasExited == false)
                        {
                            // Console.WriteLine("由主程序强行终止外部程序的运行！");
                            ////                         sw.WriteLine("外部程序打印异常,非正常退出！");
                            ////                       Proc.Kill();
                        }
                        ////                    else
                        {
                            //Console.WriteLine("由外部程序正常退出！");
                            ////                      sw.WriteLine("外部程序成功打印,正常退出！");
                        }

                        ////////////////////



                        ///////////////////




                        //  Console.WriteLine("外部程序的结束运行时间：{0}", Proc.ExitTime);
                        // Console.WriteLine("外部程序在结束运行时的返回值：{0}", Proc.ExitCode);
                        ////                  sw.WriteLine("外部程序的结束运行时间：{0}", Proc.ExitTime);
                        ////                      sw.WriteLine("外部程序在结束运行时的返回值：{0}", Proc.ExitCode);
                        sw.WriteLine("------------以上为一次打印记录-------------");
                        sw.Flush();
                        sw.Close();
                        myList.Clear();

                        Random random = new Random();
                        string OrignFile, NewFile;
                        OrignFile = Labelpath;
                        NewFile = "c:\\brother\\backup\\Label" + DateTime.Now.ToString("yyyyMMddhhmmss-") + random.Next().ToString() + ".txt";
                    //    NewFile = "c:\\brother\\backup\\Label" + file.FullName + "-" +random.Next().ToString() + ".txt";
                        File.Copy(file.FullName, NewFile, true);

                        DeleteFile(file.FullName);






                    }

                }
            }
            catch (Exception ex)
            {
                //  ex.ToString()
            }



        }


    }

}
